// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// GUIDE:
// npx prisma migrate dev
// npx prisma generate

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum AuthProvider {
    LOCAL
    GOOGLE
}

model User {
    id           Int      @id @default(autoincrement())
    username     String   @unique
    email        String   @unique
    hash         String?
    role         UserRole @default(USER)
    verified     Boolean  @default(false)
    refreshToken String?
    provider     AuthProvider   @default(LOCAL)
    providerId   String?        @unique // google sub
    avatar       String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // relations:
    createdCockpits      Cockpit[]
    favoriteCockpits     Cockpit[]           @relation("FavoriteCockpits")
    checklistsProgresses ChecklistProgress[]
    purchases            Purchase[]

    @@map("users")
}

enum UserRole {
    USER
    MODERATOR
    ADMIN
}

model Cockpit {
    id           Int      @id @default(autoincrement())
    name         String
    manufacturer String?
    model        String?
    type         String?
    isForSale    Boolean   @default(false)
    priceCents   Int?      // цена в центах/копейках
    currency     String?   // "USD","EUR","CZK" и т.п.
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // relations:
    creatorId   Int
    creator     User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    favoritedBy User[]       @relation("FavoriteCockpits")
    instruments Instrument[]
    checklists  Checklist[]
    media       Media[]
    purchases   Purchase[]

    @@map("cockpits")
}

enum PurchaseStatus {
    REQUIRES_PAYMENT
    SUCCEEDED
    CANCELED
    REFUNDED
}

model Purchase {
    id           Int           @id @default(autoincrement())
    userId       Int
    cockpitId    Int
    amountCents  Int
    currency     String
    status       PurchaseStatus @default(REQUIRES_PAYMENT)
    provider     String         // "stripe"
    providerRef  String?        // id в Stripe
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    cockpit Cockpit @relation(fields: [cockpitId], references: [id], onDelete: Cascade)

    @@unique([userId, cockpitId])
    @@map("purchases")
}

model Instrument {
    id   Int    @id @default(autoincrement())
    name String
    x    Int?
    y    Int?

    // relations:
    cockpitId      Int
    cockpit        Cockpit         @relation(fields: [cockpitId], references: [id], onDelete: Cascade)
    checklistItems ChecklistItem[]
    media          Media[]

    @@map("instruments")
}

model Media {
    id     Int       @id @default(autoincrement())
    link   String
    type   MediaType
    width  Int?
    height Int?

    // relations:
    cockpitId    Int?
    cockpit      Cockpit?    @relation(fields: [cockpitId], references: [id], onDelete: Cascade)
    instrumentId Int?
    instrument   Instrument? @relation(fields: [instrumentId], references: [id], onDelete: Cascade)

    @@map("media")
}

enum MediaType {
    PHOTO
    TEXT
    PANORAMA
}

model Checklist {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // relations:
    cockpitId  Int
    cockpit    Cockpit             @relation(fields: [cockpitId], references: [id], onDelete: Cascade)
    items      ChecklistItem[]
    progresses ChecklistProgress[]

    @@map("checklists")
}

model ChecklistItem {
    id          Int    @id @default(autoincrement())
    description String?
    order       Int

    // relations:
    checklistId  Int
    checklist    Checklist  @relation(fields: [checklistId], references: [id], onDelete: Cascade)
    instrumentId Int
    instrument   Instrument @relation(fields: [instrumentId], references: [id], onDelete: Cascade)

    @@map("checklist_items")
}

model ChecklistProgress {
    id      Int @id @default(autoincrement())
    percent Int
    attempt Int

    // relations:
    userId      Int
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    checklistId Int
    checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

    @@map("checklist_progresses")
}
